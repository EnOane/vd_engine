// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: tg.proto

package tgpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TgService_DownloadVideoStream_FullMethodName = "/tg.TgService/DownloadVideoStream"
)

// TgServiceClient is the client API for TgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TgServiceClient interface {
	DownloadVideoStream(ctx context.Context, in *DownloadVideoStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadVideoStreamResponse], error)
}

type tgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTgServiceClient(cc grpc.ClientConnInterface) TgServiceClient {
	return &tgServiceClient{cc}
}

func (c *tgServiceClient) DownloadVideoStream(ctx context.Context, in *DownloadVideoStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadVideoStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TgService_ServiceDesc.Streams[0], TgService_DownloadVideoStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadVideoStreamRequest, DownloadVideoStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TgService_DownloadVideoStreamClient = grpc.ServerStreamingClient[DownloadVideoStreamResponse]

// TgServiceServer is the server API for TgService service.
// All implementations must embed UnimplementedTgServiceServer
// for forward compatibility.
type TgServiceServer interface {
	DownloadVideoStream(*DownloadVideoStreamRequest, grpc.ServerStreamingServer[DownloadVideoStreamResponse]) error
	mustEmbedUnimplementedTgServiceServer()
}

// UnimplementedTgServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTgServiceServer struct{}

func (UnimplementedTgServiceServer) DownloadVideoStream(*DownloadVideoStreamRequest, grpc.ServerStreamingServer[DownloadVideoStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadVideoStream not implemented")
}
func (UnimplementedTgServiceServer) mustEmbedUnimplementedTgServiceServer() {}
func (UnimplementedTgServiceServer) testEmbeddedByValue()                   {}

// UnsafeTgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TgServiceServer will
// result in compilation errors.
type UnsafeTgServiceServer interface {
	mustEmbedUnimplementedTgServiceServer()
}

func RegisterTgServiceServer(s grpc.ServiceRegistrar, srv TgServiceServer) {
	// If the following call pancis, it indicates UnimplementedTgServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TgService_ServiceDesc, srv)
}

func _TgService_DownloadVideoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadVideoStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TgServiceServer).DownloadVideoStream(m, &grpc.GenericServerStream[DownloadVideoStreamRequest, DownloadVideoStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TgService_DownloadVideoStreamServer = grpc.ServerStreamingServer[DownloadVideoStreamResponse]

// TgService_ServiceDesc is the grpc.ServiceDesc for TgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tg.TgService",
	HandlerType: (*TgServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadVideoStream",
			Handler:       _TgService_DownloadVideoStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tg.proto",
}
